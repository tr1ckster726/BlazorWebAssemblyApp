@page "/"
@using Models
@inject NavigationManager NavigationManager

<PageTitle>ATP Players</PageTitle>

<h1>ATP Players</h1>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreatePlayer">New Player</button>
        @if (players is not null && players.Where(x => x.IsSelected).Count() == 2)
        {
            <button type="button" class="btn btn-secondary button-space" @onclick="ComparePlayers">Compare</button>
        }
    </div>
</div>

@if (players is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DeletePlayer Player="@currentPlayer" OnClose="@OnDeleteModalClose"></DeletePlayer>

    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            @* <th><InputCheckbox ValueExpression="@(() => isSelected)" ValueChanged="@((e) => SelectAllPlayers(e))"/></th> *@
            <th></th>
            <th>Id</th>
            <th>Name</th>
            <th>Nationality</th>
            <th>Majors</th>
            <th>Birthday</th>
            <th>Options</th>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td><InputCheckbox 
                        ValueExpression="@(() => player.IsSelected)"
                        ValueChanged="@((e) => SelectSinglePlayer(e, player.Id))"/>
                    </td>
                    <td>@player.Id</td>
                    <td>@player.Name</td>
                    <td>@player.Nationality</td>
                    <td>@player.Majors</td>
                    <td>@player.Birthday.ToString("MM/dd/yyyy")</td>
                    <td>
                        <button class="btn btn-primary" @onclick=@(() => EditPlayer(player.Id))>
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger"
                            data-bs-toggle="modal"
                            data-bs-target="#deleteModal"  
                            @onclick=@(() => currentPlayer = player)>
                            <i class="oi oi-x"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Player[]? players;

    //The currentPlayer is set when the user clicks on one of the
    //possible delete buttons
    private Player? currentPlayer;

    //When the Blazor runtime is first initialized, "OnInitialized"
    protected override void OnInitialized()
    {
        players = PlayerClient.GetPlayers();
    }

    private void CreatePlayer()
    {
        NavigationManager.NavigateTo("/player");
    }

    private void EditPlayer(int id)
    {
        NavigationManager.NavigateTo($"/player/{id}");
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            PlayerClient.DeletePlayer(currentPlayer!.Id);
            players = PlayerClient.GetPlayers();
        }
    }

    @* private void SelectAllPlayers(bool isChecked)
    {
        if (players is not null)
        {
            foreach(var player in players)
            {
                player.IsSelected = isChecked;
            }
        }
    } *@

    private void SelectSinglePlayer(bool isChecked, int playerId)
    {
        if (players is not null)
        {
            var foundplayer = PlayerClient.GetPlayer(playerId);
            foundplayer.IsSelected = isChecked;
        }
    }

    private void ComparePlayers()
    {

    }
}